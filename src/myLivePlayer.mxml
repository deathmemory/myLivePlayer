<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:jw="com.longtailvideo.jwplayer.player.*"
			   xmlns:mk="org.lala.components.*"
			   applicationComplete="application1_applicationCompleteHandler(event)"
			   currentStateChange="application1_currentStateChangeHandler(event)"
			   addedToStage="application1_addedToStageHandler(event)"
			   width="100%" height="100%">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="fullScreen"/>
		<s:State name="wideScreen"/>
	</s:states>

	<fx:Style source="myLivePlayer.css" />
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<fx:String id='version'>2.1.0.31</fx:String>
		
		<s:Fade id="fadeOut" duration="3000" alphaFrom="1" alphaTo="0" />
		<s:Fade id="fadeIn" duration="1000" alphaFrom="0" alphaTo="1" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[			
			import com.longtailvideo.jwplayer.player.Player;
			import com.longtailvideo.jwplayer.player.PlayerState;
			
			import org.lala.utils.PlayerTool;
			
			import flash.net.URLLoader;
			import flash.net.URLRequest;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import org.lala.lang.langmgr;
			import org.lala.plugins.CommentView;
			import org.lala.utils.AppConfig;
			
			/** 主播放器 **/
			private var _player:Player;
			/** 应用程序配置 **/
			private var appConfig:AppConfig;
			private var savedState:String = 'normal';
			private var isInnerFullScreenState:Boolean = false;
			/** 主播房间url **/
			private var _sUrl:String;
			/** 隐藏进入房间标签计时器 **/
			private var _entryBtnHideTimer:Timer = new Timer(1000, 1);
			/** 获取在online状态计时器 **/
			private var _onlineStateTimer:Timer = new Timer(1000, 1);
			/** room id **/
			private var _roomId:String;
			/** 请求房间信息时 忽略的秒数  **/
			private var ignoreSec:int = 0;
			
			[Bindable]
			/** 弹幕播放器插件类的引用 **/
			private var commentView:CommentView = CommentView.getInstance();
			/** 播放器小助手 **/
			private var playerTool:PlayerTool;
			
			protected function onLoaderComplete(evt:Event):void
			{
				trace("onLoaderComplete");
			}
			
			protected function onLoaderIOError(evt:Event):void
			{
				trace("onLoaderIOError");
			}
			
			protected function onLoaderSecurityError(evt:Event):void
			{
				trace("onLoaderSecurityError");
			}
			
			private function playerReadyHandler(event:Event):void
			{
				trace('播放器初始化完成.');
				
				_player = livePlayer.player;
				
				_onlineStateTimer.start();
				playerTool = new PlayerTool(_player);
				loadVideo();
				/*
				_player.addEventListener( Event.COMPLETE, onLoaderComplete );
				_player.addEventListener( IOErrorEvent.IO_ERROR, onLoaderIOError );
				_player.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onLoaderSecurityError );
				
				var addr:String = "http://127.0.0.1/videoes/xtxl.flv";
				_player.load(
					{   type:'ol',
						file:addr
					});
				*/
			}	
			
			protected function loadVideo():void
			{
				var flashVars:Object = this.systemManager.loaderInfo.parameters;
				if ( flashVars['vid'] )
				{
					playerTool.loadYoutubeVideo(flashVars.vid);
				}
				else if ( flashVars['channel'] )
				{
					playerTool.loadLiveStream(flashVars.sa, flashVars.channel);
				}
			}

			protected function application1_currentStateChangeHandler(event:StateChangeEvent):void
			{
				if ( appConfig )
					appConfig.state = this.currentState;
			}
			/** 在loadInfo可读取时立即初始化配置 **/
			protected function application1_addedToStageHandler(event:Event):void
			{
				removeEventListener(Event.ADDED_TO_STAGE, this.application1_addedToStageHandler);
				
				var params:Object = loaderInfo.parameters;
				appConfig = new AppConfig(params);
				
				_roomId = params.channel;
				_sUrl = "http://www.nikksy.com/live.html?c=" + _roomId;
				
				/** 初始化到无界面状态 **/
				if(appConfig.state == 'fullScreen')
				{
					//isInnerFullScreenState = true;
				}
			}
			
			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				//Security.allowDomain("*");
				/** 初始语言配置  **/
				this.initControlsLanguageCfg();
				this.currentState = appConfig.state;
				//commentView.addEventListener("innerFullScreen",innerFullScreenHandler);
				commentView.addEventListener("innerFullScreen",innerFullScreenHandler);
				commentView.version = NKSPLAYER::version;
				/** 进入房间计时器初始化 **/
				_entryBtnHideTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(evt:TimerEvent):void{					
					entryBtn.visible = false;
				});
				
				_onlineStateTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onlineStateReq);
				/** 全屏情况处理,更改state **/
				stage.addEventListener( FullScreenEvent.FULL_SCREEN, fullScreenHandler );
			}
			
			/**
			 * 获取主播在线状态，修改显示状态
			 * **/	
			private function onlineStateReq(evt:TimerEvent):void
			{
				var player:Player = livePlayer.player;
				if ( player.state != PlayerState.BUFFERING )
				{
					return;	
				}
				else
				{
					/** 请求的时候忽略10秒 **/
					if ( 0 == ignoreSec )
					{
						ignoreSec = 10;	// 忽略秒数
					}
					else
					{
						ignoreSec --;
						return;
					}
				}
				var loader:URLLoader = new URLLoader();
				var req:URLRequest = new URLRequest('http://www.nikksy.com/streaming/channel/info?channels=' + _roomId);
				var errorHandler:Function = function(event:Event):void
				{
					trace("加载任务失败:" + event.toString());
					_onlineStateTimer.reset();
					_onlineStateTimer.start();
				}
				loader.addEventListener(Event.COMPLETE,function(event:Event):void
				{
					try
					{
						var json:Object = JSON.parse(loader.data);
						//if (json['data'])
						{
							var roomInfo:Object = json['data'][0] as Object;
							var isOnline:Boolean = int(roomInfo['is_online']) == 0 ? false : true;
							labLive_changeState(isOnline);
						}
					}
					catch(err:*)
					{
						trace("not a good json err:"+err.toString());
					}
					trace("load user info end " + new Date().time);
				});
				loader.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,errorHandler);
				try
				{
					//trace("before load " + new Date().time);
					loader.load(req);
				}
				catch(error:Error)
				{
					trace('加载任务失败:' +error.toString());
				}
				_onlineStateTimer.reset();
				_onlineStateTimer.start();
			}
			
			/** 初始化语言配置  **/
			private function initControlsLanguageCfg():void
			{
				langmgr.init(systemManager.loaderInfo.parameters);
				
				entryBtn.textFlow = TextConverter.importToFlow(String("<font color=\"#ff6400\" size='18' >")
					+ langmgr.getString("Entry_the_room") + ("</font>"), 
					TextConverter.TEXT_FIELD_HTML_FORMAT);
			}
			
			/** 处理播放器的工具条上的隐藏弹幕界面按钮事件 **/
			private function innerFullScreenHandler(event:Event):void
			{
				if(stage.displayState == 'fullScreen')
				{
					return;
				}
				if(!isInnerFullScreenState)
				{
					savedState = currentState;
					currentState = 'fullScreen';
				}
				else
				{
					currentState = savedState;
				}
				isInnerFullScreenState = !isInnerFullScreenState;
			}
			/** 
			 * 全屏处理:fullScreen状态是播放器填满整个flash插件,全屏则是flash插件填满屏幕
			 * 其实是两个不同的状态,但是共用一个state,而使用isInnerFullScreenState来区分
			 ***/
			private function fullScreenHandler(event:FullScreenEvent):void
			{
				if(isInnerFullScreenState)
				{
					return;
				}
				if(stage.displayState == 'fullScreen')
				{
					savedState = currentState;
					currentState = 'fullScreen';
				}
				else
				{
					currentState = savedState;
				}
			}
			
			/**
			 * 处理显示Live标识是否online状态
			 ***/
			protected function labLive_changeState(onlive:Boolean):void
			{
				var textSize:String = "15";
				var tf:TextField = new TextField();
				tf.autoSize = TextFieldAutoSize.LEFT;
				var fstr :String = "";
				if ( onlive )
				{	// onlive
					fstr = langmgr.getString("mmp_onlive");
					if ( fstr == null )
						fstr = "LIVE";
					fstr = String("<font color=\"#ff0000\">●</font><font color=\"#ffffff\" size='") + textSize + ("' >") + fstr	+ "</font>";
				}
				else
				{	// offline
					fstr = langmgr.getString("mmp_offline");
					if ( fstr == null )
						fstr = "OFFLINE";
					fstr = String("<font color=\"#ffffff\" size='") + textSize + ("' >") + fstr + "</font>";
					// 当已经 offline 的时候不必再请求数据
					_player.stop();
					// 显示推广界面
					popuUI.visible = true;
				}
				
				tf.htmlText = fstr;
				
				labLive.textFlow = TextConverter.importToFlow(fstr, TextConverter.TEXT_FIELD_HTML_FORMAT);
				labLive.width = tf.width + 20;
				labLive.height = tf.height + 4;
				labLive.visible = true;
				return;
			}
			
			/**
			 * 进入房间标签点击响应
			 * **/
			protected function entryBtn_clickHandler(event:MouseEvent):void
			{
				if (null != _sUrl)
				{
					var request:URLRequest = new URLRequest(_sUrl);  
					navigateToURL(request, "_blank");	
				} 
			}
			
			/**
			 * 响应鼠标移过是否显示进入房间标志
			 * **/
			protected function bordercontainer1_mouseOverAndMoveHandler(event:MouseEvent):void
			{
				var url:String = ExternalInterface.call('window.location.href.toString');
				if (_sUrl != url)
				{
					if ( false == entryBtn.visible )
					{
						entryBtn.visible = true;
						_entryBtnHideTimer.start();
					}
					else
					{
						_entryBtnHideTimer.reset();
						_entryBtnHideTimer.start();
					}
				}
				
				//trace("mouseMoveHandler x:" + event.localX + " y:" + event.localY);
			}
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout gap="1" paddingTop="0" paddingBottom="0"/>
			</s:layout>
			<s:BorderContainer borderWeight="0" width="100%" height="100%" backgroundColor="#000000" borderVisible="false"
							   mouseMove="bordercontainer1_mouseOverAndMoveHandler(event)" >
				<jw:JWPlayer id="livePlayer" width="100%" height="100%" playerReady="playerReadyHandler(event)" 
							 top="0" bottom="0" left="0" right="0"/>	
				<s:TextArea id="labLive" left="10" top="10" editable="false" selectable="false" borderVisible="false" visible="false"
							verticalAlign="middle" textAlign="center" contentBackgroundAlpha="0.6" contentBackgroundColor="0x000000"
							skinClass="org.lala.components.LiveLabel"/>
				<s:TextArea id="entryBtn" visible="false" width="300" height="60"
							borderVisible="false" buttonMode="true"
							click="entryBtn_clickHandler(event)" contentBackgroundAlpha="0.8"
							contentBackgroundColor="0x000000" editable="false" horizontalCenter="0"
							selectable="false" skinClass="org.lala.components.LiveLabel"
							text="entry" textAlign="center" verticalAlign="middle"
							verticalCenter="0" hideEffect="{fadeOut}" showEffect="{fadeIn}" />
				<mk:popularizeUI id="popuUI" width="100%" height="100%" visible="false"/>
			</s:BorderContainer>
			<!-- 暂时去掉弹幕发送窗口 
			<s:BorderContainer width="100%" height="40" borderVisible="true" excludeFrom="fullScreen">
				<mk:NormalCommentInput id="nCommnetInput" width="100%" height="100%" />				
			</s:BorderContainer>
			-->
		</s:Group>
	</s:Group>
	
</s:Application>
