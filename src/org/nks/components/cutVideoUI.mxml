<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:lac="org.lala.components.*"
		 xmlns:nks="org.nks.components.*"
		 minWidth="200" minHeight="40"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.longtailvideo.jwplayer.events.MediaEvent;
			import com.longtailvideo.jwplayer.events.ViewEvent;
			import com.longtailvideo.jwplayer.player.Player;
			import com.longtailvideo.jwplayer.player.PlayerState;
			import com.longtailvideo.jwplayer.utils.Strings;
			
			import mx.controls.Button;
			import mx.controls.HSlider;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.formatters.NumberFormatter;
			
			private var _player:Player;
			private var _duration:Number;
			
			private var _onDrag:Boolean = false;
			private var _bLeftBtn = true;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				lbtn.x = bgc.width * 1/3;
				rbtn.x = bgc.width * 2/3;
				
				lbtn.addEventListener(MouseEvent.MOUSE_DOWN, lbtnDown);
				rbtn.addEventListener(MouseEvent.MOUSE_DOWN, rbtnDown);
				
				//bgc.stage.addEventListener(MouseEvent.MOUSE_MOVE, bgc_mouseMoveHandler);
			}
			
			public function init(player:Player):void
			{
				//trace("ver: 1.2");
				_player = player;
				if (_player)
				{
					this.visible = true;
					_player.volume(50);
					_player.addEventListener(MediaEvent.JWPLAYER_MEDIA_TIME, mediaHandler);
					_player.addEventListener(MediaEvent.JWPLAYER_MEDIA_VOLUME, volumeHandler);
					
					stage.addEventListener(MouseEvent.MOUSE_MOVE, bgc_mouseMoveHandler);
				}
			}
			
			protected function volumeHandler(evt:MediaEvent):void 
			{
				trace("volume:" + evt.volume);
			}
			
			private function mediaHandler(evt:MediaEvent):void 
			{
				switch (evt.type) {
					case MediaEvent.JWPLAYER_MEDIA_TIME:
						//_player.removeEventListener(MediaEvent.JWPLAYER_MEDIA_TIME, mediaHandler);
						_duration = evt.duration;
						fgc.width = bgc.width * (evt.position / evt.duration);
						setSliderTime(evt.position, evt.duration);
						break;
				}
			}
			
			private function setSliderTime(pos:Number, dur:Number):void
			{
				posTime.text = Strings.digits(pos);
				durTime.text = Strings.digits(dur);
			}
			
			protected function doThg_clickHandler(event:MouseEvent):void
			{
				_player.seek(293);
			}
			
			private function startMove(event:Event):void  
			{  
				var component:UIComponent = event.currentTarget as UIComponent;
				stage.addEventListener(MouseEvent.MOUSE_UP, this.stopMove);
				
				mslider.maxWidth = mslider.width;
				bgc.maxWidth = bgc.width;
				
				if ( _bLeftBtn ) 
				{
					var rpoint:Point = rbtn.contentToLocal(new Point(rbtn.x, rbtn.y));
					var bgcpoint:Point = (new Point(bgc.x, bgc.y));
					component.startDrag(false, new Rectangle(0 - lbtn.width , 0, rpoint.x - bgcpoint.x, 0));
				}
				else
				{
					var lpoint:Point = lbtn.contentToLocal(new Point(lbtn.x, lbtn.y));
					var bgcpoint:Point = (new Point(bgc.x, bgc.y));
					var lbpos:Number = lpoint.x + lbtn.width;
					component.startDrag(false, new Rectangle(lbpos, 0, bgc.width - lbpos, 0));
					//trace("x:" + lbpos + " width:" + (bgc.width - lbpos) + " bgc.width:" + bgc.width);
				}
			} 
			
			private function stopMove(event:Event):void  
			{				
				stage.removeEventListener(MouseEvent.MOUSE_UP, this.stopMove);
				stopDrag();
				
				var bgcpoint:Point = (new Point(bgc.x, bgc.y));
				var point:Point;
				var x:Number;
				var lx:Number;
				var rx:Number;
				
				point = lbtn.contentToLocal(new Point(lbtn.x, lbtn.y));		
				lx = point.x + lbtn.width;
				
				point = rbtn.contentToLocal(new Point(rbtn.x, rbtn.y));		
				rx = point.x;
				
				if ( _bLeftBtn )
					x = lx;
				else
					x = rx;
				
				var p:Number = (x - bgcpoint.x) / bgc.width;
				var time:Number = p * this._duration;
				try {
					if ( _player.state == PlayerState.PAUSED ) {
						this._player.seek(time);
						_player.pause();
					} else
						this._player.seek(time);
				} catch(e) {
					trace("invalid video");
				}
				
				time = (lx - bgcpoint.x) / bgc.width * this._duration; 
				var timeR:Number = (rx - bgcpoint.x) / bgc.width * this._duration;
				var len:Number = timeR - time;
				trace("time:" + time + " len:" + len);
				var jsObj:Object = new Object;
				jsObj.time = time;
				jsObj.len = len;
				ExternalInterface.call("cutVideoInfo", jsObj);
			}
			
			private function lbtnDown(event:MouseEvent):void
			{
				_bLeftBtn = true;
				startMove(event);
			}
			
			private function rbtnDown(event:MouseEvent):void
			{
				_bLeftBtn = false;
				startMove(event);
			}
			
			private function isInRect(event:MouseEvent, point:Point, tgt:Object):Boolean
			{
				if ( ( event.stageX >= point.x && event.stageX <= (point.x + tgt.width) )
					&& ( event.stageY > point.y && event.stageY < (point.y + tgt.height) ) )
					return true;
				else
					return false;
			}
			
			protected function bgc_mouseMoveHandler(event:MouseEvent):void
			{
				var point:Point = bgc.localToGlobal(new Point(bgc.x, bgc.y));
				if (isInRect(event, point, bgc))
				{
					var p:Number;
					if (isInRect(event, new Point(lbtn.x + 79, point.y), lbtn)) {
						p = (lbtn.x + lbtn.width) / bgc.width;
						//trace("in lbtn");
					} else if (isInRect(event, new Point(rbtn.x + 79, point.y), rbtn)) {
						p = rbtn.x / bgc.width;
					} else
						p = ( event.stageX - point.x ) / bgc.width;
					var time:Number = p * this._duration;
					
					timeTip.text = Strings.digits(time);
					tipGrp.x = event.stageX - tipGrp.width / 2; 
					tipGrp.visible = true;
					//trace ("in rect");
				}
				else
				{
					tipGrp.visible = false;
					//trace ("not in rect");
				}
				//trace("event.stageX :" + event.stageX + " y:" + event.stageY);
			}
			
			private function onMouseOut(event:MouseEvent):void
			{
				tipGrp.visible = false;
			}
			
			[Embed(source="assets/cleft.png")]
			private var leftBtnIcon:Class;
			[Embed(source="assets/cright.png")]
			private var rightBtnIcon:Class;
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:HGroup id="mainGrp" width="100%" height="100%" gap="0" >
		<!--
		<s:Label id="posTime" right="0" width="40" height="100%" backgroundColor="#0FFF97"
				 chromeColor="#FE0303" color="#FF0404" text="posTime" textAlign="center"
				 verticalAlign="middle"/>
		-->
		<s:HGroup width="79" height="100%" gap="0">
			<s:Group width="65" height="100%">
				<s:BitmapImage source="@Embed(source='assets/clleft_1.png')" width="65" height="20" />
				<s:Label id="posTime" right="0" width="100%" height="100%" color="#cdcdcd" text="posTime" 
						 top="2" textAlign="center" verticalAlign="middle"/>
			</s:Group>
			<s:BitmapImage source="@Embed(source='assets/clleft_2.png')" width="14" height="20"/>
		</s:HGroup>
		
		<s:HGroup id="mslider" width="100%" height="100%" gap="0" depth="2" >
			<s:Group width="100%" height="100%" mouseOut="onMouseOut(event)">
				<!-- <s:Label id="bgc" backgroundColor="#222224" width="100%" height="100%" verticalCenter="0"/>
				<s:Label id="fgc" backgroundColor="#cdcdcd" width="0" height="100%" verticalCenter="0"/>
				<s:Button id="lbtn" chromeColor="#FE6D03" width="10" height="100%" mouseDown="lbtnDown" />
				<s:Button id="rbtn" chromeColor="#FE6D03" width="10" height="100%" mouseDown="rbtnDown"/>	-->
				<s:BitmapImage id="bgc" width="100%" height="100%" verticalCenter="0" source="@Embed(source='assets/cbottom.png')" />
				<s:BitmapImage id="fgc" width="0" height="100%" verticalCenter="0" source="@Embed(source='assets/cproc.png')" />
				<lac:IconButton id="lbtn" width="10" height="100%" mouseDown="lbtnDown" 
								upimg="{leftBtnIcon}" overimg="{leftBtnIcon}" downimg="{leftBtnIcon}"
								skinClass="org.lala.components.skins.IconButtonSkin"/>
				<lac:IconButton id="rbtn" width="10" height="100%" mouseDown="rbtnDown" 
								upimg="{rightBtnIcon}" overimg="{rightBtnIcon}" downimg="{rightBtnIcon}"
								skinClass="org.lala.components.skins.IconButtonSkin"/>
			</s:Group>
		</s:HGroup>
		
		<s:HGroup width="79" height="100%" gap="0">
			<s:BitmapImage source="@Embed(source='assets/clright_2.png')" width="14" height="20"/>
			<s:Group width="65" height="100%">
				<s:BitmapImage source="@Embed(source='assets/clright_1.png')" width="65" height="20" />
				<s:Label id="durTime" right="0" width="100%" height="100%" color="#cdcdcd" text="durTime" 
						 top="2" textAlign="center" verticalAlign="middle"/>
			</s:Group>
		</s:HGroup>
		<!--
		<s:Label id="durTime" width="40" height="100%" backgroundColor="#FC9708" text="durTime"
				 textAlign="center" verticalAlign="middle"/>
		-->
	</s:HGroup>
	
	<s:Group id="tipGrp" width="88" height="37" y="-35" visible="false">
		<s:BitmapImage source="@Embed(source='assets/tip.png')" width="{tipGrp.width}" height="{tipGrp.height}" />
		<s:Label id="timeTip" text="11:11" color="#ffffff" width="{tipGrp.width}" height="30"
				 textAlign="center" verticalAlign="middle" />
	</s:Group>
	
</s:Group>
